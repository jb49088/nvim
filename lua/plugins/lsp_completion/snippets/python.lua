local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node
local i = ls.insert_node
local fmt = require("luasnip.extras.fmt").fmt

return {
    -- learning snippets
    s(
        "fruits",
        t({
            "fruits: list[str] = [",
            '    "apple",',
            '    "banana",',
            '    "orange",',
            '    "grape",',
            '    "strawberry",',
            "]",
        })
    ),
    s(
        "colors",
        t({
            "colors: tuple[str, ...] = (",
            '    "red",',
            '    "blue",',
            '    "green",',
            '    "yellow",',
            '    "purple",',
            ")",
        })
    ),
    s(
        "products",
        t({
            "products: dict[str, int] = {",
            '    "laptop": 999,',
            '    "mouse": 25,',
            '    "keyboard": 75,',
            '    "monitor": 250,',
            '    "headphones": 150,',
            "}",
        })
    ),
    s(
        "languages",
        t({
            "languages: set[str] = {",
            '    "python",',
            '    "javascript",',
            '    "rust",',
            '    "go",',
            '    "java",',
            "}",
        })
    ),
    s(
        "users",
        t({
            "users: list[dict[str, str | int]] = [",
            '    {"name": "alice", "age": 25},',
            '    {"name": "bob", "age": 30},',
            '    {"name": "charlie", "age": 22},',
            "]",
        })
    ),
    s("numbers", t("numbers: list[int] = [1, 5, 3, 9, 2, 8, 4, 7, 6]")),
    s(
        "cities",
        t({
            "cities: dict[str, dict[str, str | int]] = {",
            '    "toronto": {',
            '        "country": "canada",',
            '        "population": 3_025_647,',
            '        "fact": "toronto is canadas largest city",',
            "    },",
            '    "london": {',
            '        "country": "united kingdom",',
            '        "population": 8_954_146,',
            '        "fact": "london has the oldest subway in the world",',
            "    },",
            '    "moscow": {',
            '        "country": "russia",',
            '        "population": 13_456_186,',
            '        "fact": "most populous city in europe",',
            "    },",
            "}",
        })
    ),
    s("pygame_full", {
        t({
            "import sys",
            "",
            "import pygame",
            "",
            "",
            "class Settings:",
            '    """A class to store all settings."""',
            "",
            "    def __init__(self):",
            '        """Initialize the game\'s settings."""',
            "        # Frame rate",
            "        self.framerate = ",
        }),
        i(1, "60"),
        t({
            "",
            "        # Screen settings",
            "        self.screen_width = ",
        }),
        i(2, "800"),
        t({
            "",
            "        self.screen_height = ",
        }),
        i(3, "800"),
        t({
            "",
            "        self.bg_color = ",
        }),
        i(4, "(0, 0, 0)"),
        t({
            "",
            "",
            "",
            "class ",
        }),
        i(5, "Game"),
        t({
            ":",
            '    """Overall class to manage game assets and behavior."""',
            "",
            "    def __init__(self):",
            '        """Initialize the game, and create game resources."""',
            "        pygame.init()",
            "        self.settings = Settings()",
            "        self.screen = pygame.display.set_mode(",
            "            (self.settings.screen_width, self.settings.screen_height)",
            "        )",
            "        self.clock = pygame.time.Clock()",
            "",
            "    def run_game(self):",
            '        """Start the main loop for the game."""',
            "        while True:",
            "            self._event_loop()",
            "            self._update_screen()",
            "            self.clock.tick(self.settings.framerate)",
            "",
            "    def _event_loop(self):",
            '        """Respond to keypresses and mouse events."""',
            "        for event in pygame.event.get():",
            "            if event.type == pygame.QUIT:",
            "                sys.exit()",
            "            elif event.type == pygame.KEYDOWN:",
            "                pass",
            "            elif event.type == pygame.KEYUP:",
            "                pass",
            "",
            "    def _update_screen(self):",
            '        """Update images on the screen, and flip to the new screen."""',
            "        self.screen.fill(self.settings.bg_color)",
            "        pygame.display.flip()",
            "",
            "",
            'if __name__ == "__main__":',
            "    ",
        }),
        i(6, "game"),
        t(" = "),
        rep(5),
        t({
            "()",
            "    ",
        }),
        rep(6),
        t(".run_game()"),
    }),
    s("pygame_minimal", {
        t({
            "import pygame",
            "",
            "",
            "class ",
        }),
        i(1, "Game"),
        t({
            ":",
            "    def __init__(self):",
            "        pygame.init()",
            "        self.screen = pygame.display.set_mode((",
        }),
        i(2, "800"),
        t(", "),
        i(3, "800"),
        t({
            "))",
            "        self.clock = pygame.time.Clock()",
            "",
            "    def run(self):",
            "        running = True",
            "        while running:",
            "            for event in pygame.event.get():",
            "                if event.type == pygame.QUIT:",
            "                    running = False",
            "            ",
            "            self.screen.fill((",
        }),
        i(4, "0, 0, 0"),
        t({
            "))",
            "            pygame.display.flip()",
            "            self.clock.tick(",
        }),
        i(5, "60"),
        t({
            ")",
            "",
            "",
            'if __name__ == "__main__":',
            "    ",
        }),
        i(6, "game"),
        t(" = "),
        rep(1),
        t({
            "()",
            "    ",
        }),
        rep(6),
        t(".run()"),
    }),
}
